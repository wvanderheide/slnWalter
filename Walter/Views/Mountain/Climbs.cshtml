@using Walter.ViewModels;
@model List<VmClimbYear>
@{
    int lagYear = 0;
    string yearList = string.Empty;
    int climbsPerYear = 0;
    int totalClimbs = 0;
}
<a href="#" onclick="$('#divFilters').slideToggle('slow');"><i class="fa fa-filter"></i> Filter</a>
<div class="row" id="divFilters" style="display:none">
    <div class="col-sm-6">
        <b>Filter by month and year</b>
        <table>
            <tr>
                <td>Start Date:</td>
                <td>@MonthSelect("StartMonth")</td>
                <td>@Years("StartYear")</td>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>End Date:</td>
                <td>@MonthSelect("EndMonth")</td>
                <td>@Years("EndYear")</td>
                <td>&nbsp;<button type="button" onclick="monthYearFilter();" class="btn btn-primary" id="btnGo" name="btnGo">Go!</button></td>
            </tr>
        </table>
        <form method="POST" action="@Url.Action("Filter", "Mountain")" id="form2" name="form2">
            <input type="hidden" id="startDate" name="startDate" />
            <input type="hidden" id="endDate" name="endDate" />
        </form>
    </div>
    <div class="col-sm-6">
        <b>Filter by specific date range</b>
        <form method="POST" action="@Url.Action("Filter", "Mountain")" id="form1" name="form1">
            <table>
                <tr>
                    <td>Start Date:</td>
                    <td><input type="date" class="form-control" id="startDate" name="startDate" placeholder="Start Date" /></td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>End Date:</td>
                    <td><input type="date" class="form-control" id="endDate" name="endDate" placeholder="End Date" /></td>
                    <td>&nbsp;<button type="button" onclick="climbsValidate();" class="btn btn-primary" id="btnGo" name="btnGo">Go!</button></td>
                </tr>
            </table>
        </form>
    </div>
</div>
<br />
<div id="jumpTo"></div>
@foreach (var y in Model)
{
    if (lagYear != y.Year)
    {
        lagYear = y.Year;
        yearList += y.Year + ",";
        climbsPerYear = y.Col1.Count + y.Col2.Count + y.Col3.Count + y.Col4.Count;
        @YearHeader(y.Year, climbsPerYear)
        totalClimbs = totalClimbs + climbsPerYear;
    }
    <div class="row">
        <div class="col-sm-3">
            <ul>
                @ListItems(y.Col1)
            </ul>
        </div>
        <div class="col-sm-3">
            <ul>
                @ListItems(y.Col2)
            </ul>
        </div>
        <div class="col-sm-3">
            <ul>
                @ListItems(y.Col3)
            </ul>
        </div>
        <div class="col-sm-3">
            <ul>
                @ListItems(y.Col4)
            </ul>
        </div>
    </div>
    <div class="row">
        <div class="col-sm-12" style="text-align: right"><span class="badge">@climbsPerYear</span></div>
    </div>
}
@{
    int length = yearList.Length - 1;
    if (length > 0)
    {
        yearList = yearList.Substring(0, length);
        yearList = "[" + yearList + "]";
    }
    else
    {
        yearList = "NONE";
    }
}
<br />
<br />
    Total climbs: <span class="badge">@totalClimbs</span>
    @section DocumentReady
{
        <script>
            $(document).ready(function () {
                createJumpAnchors(@yearList, 'Year','jumpTo');
            });
        </script>
    }

    @* -----------------------------------------------------------------------------
           Helper Methods
        ------------------------------------------------------------------------------- *@
    @helper YearHeader(int year, int count)
{
    <br />
    <div class="row">
        <a id="Year@(year)"></a>
        <div class="col-sm-12" style="background-color:#eee; color:black; font-weight:bold;" title="Total climbs for @year = @count">@year</div>
    </div>
}

    @helper ListItems(List<VmClimb> col)
{
    foreach (var item in col)
    {

        <li>
            @if (!string.IsNullOrEmpty(item.SummitNote))
            {
                @item.Name@:, @item.State <span class="small" title="@(item.SummitNote)" style="cursor:pointer">(@string.Format("{0:M/d}", item.SummitDate))</span><sup style="cursor:pointer" title="@(item.SummitNote)">*</sup>
            }
            else
            {
                @item.Name@:, @item.State <span class="small">(@string.Format("{0:M/d}", item.SummitDate))</span>
            }
        </li>
    }
}

    @helper MonthSelect(string name)
{
    <select name="@name" id="@name" class="form-control">
        @for (int i = 1; i <= 12; i++)
        {
            DateTime dtDate = new DateTime(1999, i, 1);
            <option value="@i">@dtDate.ToString("MMMM")</option>
        }
    </select>
}

    @helper Years(string name)
{
    <select name="@name" id="@name" class="form-control">
        @for (int i = DateTime.Now.Year; i >= 1967; i--)
        {
            <option value="@i">@i</option>
        }
    </select>
}
